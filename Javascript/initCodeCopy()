initCodeCopy();

async function initCodeCopy() {
	createCSS();

	// get the list of all highlight code blocks
	const codeblocks = document.querySelectorAll("code");

	codeblocks.forEach(async (code) => {
		// create the copy button
		const copy = document.createElement("button");
		copy.innerHTML = "Copy";
		// add the event listener to each click
		copy.addEventListener("click", handleCopyClick);
		// prepend the copy button to each code block
		code.prepend(copy);
	});

	const copyToClipboard = async (str) => {
		const el = document.createElement("textarea"); // Create a <textarea> element
		el.value = str; // Set its value to the string that you want copied
		el.setAttribute("readonly", ""); // Make it readonly to be tamper-proof
		el.style.position = "absolute";
		el.style.left = "-1000vw"; // Move outside the screen to make it invisible
		document.body.appendChild(el); // Append the <textarea> element to the HTML document
		const selected =
			document.getSelection().rangeCount > 0 // Check if there is any content selected previously
				? document.getSelection().getRangeAt(0) // Store selection if found
				: false; // Mark as false to know no selection existed before
		el.select(); // Select the <textarea> content
		document.execCommand("copy"); // Copy - only works as a result of a user action (e.g. click events)
		document.body.removeChild(el); // Remove the <textarea> element
		if (selected) {
			// If a selection existed before copying
			document.getSelection().removeAllRanges(); // Unselect everything on the HTML document
			document.getSelection().addRange(selected); // Restore the original selection
		}
	}

	async function handleCopyClick(evt) {
		var texts = []; //Init
		getText(evt.target.parentElement, texts); //Recursively getting inner text.
		texts.shift(); //Remove copy button text.
		var text = texts.join(""); //Create a single string out of each array element.
		copyToClipboard(text); // copy all of the code to the clipboard
		// alert to show it worked, but you can put any kind of tooltip/popup to notify it worked
		// alert(text)
	}
	async function getText(node, accumulator) {
		if (node.nodeType === 3) // 3 == text node
			accumulator.push(node.nodeValue)
		else
			for (let child of node.childNodes)
				getText(child, accumulator)
	}


	async function createCSS() {
		let css =
			`
        pre: has(code) {
            background-color: #161616;
            color: white;
        }

        code button {
            color: #black;
            box-sizing: border-box;
            transition: 0.2s ease-out;
            user-select: none;
            background: rgba(0, 0, 0, 0.15);
            border: 1px solid rgba(0, 0, 0, 0);
            padding: .4rem .8rem;
            font-size: 0.8rem;
            position: relative;
            top: 0;
            right: 0;
            border-radius: 0 0.15rem;
            float: right;
        }
        code button:hover {
            color: white;
            cursor: pointer;
            background: rgba(0, 0, 0, 0.5);
            font-size: 1rem;
        }
    `;

		head = document.head || document.getElementsByTagName('head')[0];
		style = document.createElement('style');
		head.appendChild(style);

		style.type = 'text/css';
		if (style.styleSheet)
			style.styleSheet.cssText = css; // This is required for IE8 and below.
		else
			style.appendChild(document.createTextNode(css));
	}
}