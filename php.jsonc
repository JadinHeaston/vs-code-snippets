{
	// Place your snippets for php here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "PHP - Display General Errors": {
		"prefix": "PHP - Display General Errors",
		"body": [
			"ini_set('display_errors', 1);",
            "ini_set('display_startup_errors', 1);",
            "error_reporting(E_ALL);",
			"$0"
		],
		"description": "Outputs PHP errors to the webpage."
    },
    // ini_set('display_errors', 1);
	// ini_set('display_startup_errors', 1);
	// error_reporting(E_ALL);
	//
	
    "PHP - JSON Decode With Comments": {
		"prefix": "PHP - JSON Decode With Comments",
		"body": [
			"function json_decode_commented(\\$json, \\$assoc = false, \\$maxDepth = 512, \\$opts = 0)",
            "{",
            "\t\\$json = preg_replace('~(\" (?:\\\\\\\\\\\\\\. | [^\"])*+ \") | \\# [^\\v]*+ | // [^\\v]*+ | /\\* .*? \\*/~xs', '\\$1', \\$json);",
            "\t",
            "\treturn json_decode(\\$json, \\$assoc, \\$maxDepth, \\$opts);",
			"}"
		],
		"description": "Outputs PHP function that decodes JSON and strips away comments."
    }
	// function json_decode_commented($json, $assoc = false, $maxDepth = 512, $opts = 0)
	// {
	// 	$json = preg_replace('~(" (?:\\\\. | [^"])*+ ") | \# [^\v]*+ | // [^\v]*+ | /\* .*? \*/~xs', '$1', $json);
	
	// 	return json_decode($json, $assoc, $maxDepth, $opts);
	// }

	
}
